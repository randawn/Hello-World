
(define zero
    (lambda (f) (lambda (x) x))
)

(define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x))))
)

(define one 
    (add-1 zero)
)
(define one
    (lambda (f) (lambda (x) (f x)))
)

(define two
;    (add-1 (add-1 zero))
    (lambda (f) (lambda (x) (f (f x))))
)

(define add
    (lambda (a b)
        (lambda (f) (lambda (x) ((a f) ((b f) x))))
    )
)
(define mul
    (lambda (a b)
        (lambda (f) (lambda (x) ((a (b f)) x)))
    )
)
(define exp
    (lambda (a b)
        (lambda (f) (lambda (x) (((a b) f) x)))
    )
)

(define (show-num n) ((n (lambda (x) (+ 1 x))) 0))

(show-num zero)
(show-num one)
(show-num two)
(show-num (add one two))
(show-num (mul (mul two two) two))
(show-num (exp (exp two two) two))

