
(define addend       cadr)
(define augend       caddr)
(define multiplier   cadr)
(define multiplicand caddr)
(define base         cadr)
(define exponent     caddr)

(define (is-sign? sign)
    (lambda (x) (and (pair? x) (eq? (car x) sign)))
)
(define sum?            (is-sign? '+))
(define product?        (is-sign? '*))
(define exponentiation? (is-sign? '**))

(define (same-variable? v1 v2)
    (and (symbol? v1) (symbol? v2) (eq? v1 v2))
)
(define (=number? exp num)
    (and (number? exp) (= exp num))
)
(define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (list '+ a1 a2))
    )
)
(define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (list '* m1 m2))
    )
)
(define (make-exponentiation b e)
    (cond ((=number? e 0) 1)
          ((=number? e 1) b)
          (else (list '** b e))
    )
)

(define (deriv exp var)
    (cond ((number? exp) 0)
          ((symbol? exp)
               (if (same-variable? exp var) 1 0)
          )
          ((sum? exp)
           (make-sum (deriv (addend exp) var)
                     (deriv (augend exp) var))
          )
          ((product? exp)
           (make-sum (make-product (multiplier exp)
                                   (deriv (multiplicand exp) var)
                     )
                     (make-product (multiplicand exp)
                                   (deriv (multiplier exp) var)))
          )
          ((exponentiation? exp)
           (make-product (make-product (exponent exp)
                                       (make-exponentiation (base exp)
                                                            (- (exponent exp) 1)
                                       )
                         )
                         (deriv (base exp)
                                var
                         )
           )
          )
          (else (error "unknow exp type -- DERIV" exp))
    )
)

;(deriv '(+ x 3) 'x)
;(deriv '(* x y) 'x)
;(deriv '(* (* x y) (+ x 3)) 'x)
;(deriv '(** x 0) 'x)
;(deriv '(** x 1) 'x)
;(deriv '(** x 2) 'x)
;(deriv '(** x 3) 'x)

