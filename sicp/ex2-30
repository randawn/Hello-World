

(define (square-tree t)
    (cond ((null? t) '())
          ((not (pair? t)) (square t))
          (else (cons (square-tree (car t)) (square-tree (cdr t))))
    )
)
(define (square-tree t)
    (map (lambda (st)
              (if (pair? st)
                  (square-tree st)
                  (square st))
         )
         t)
)

(define t (list 1 (list 2 (list 3 4 ) 5) (list 6 7)))

(square-tree t)

