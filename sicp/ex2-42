
(load "ex2-40")
(define (queens board-size)
    (define (queens-cols k)
        (if (= k 0)
            empty-board
            (filter (lambda (positions) (safe? k positions))
                    (flatmap (lambda (rest-of-queens)
                                 (map (lambda (new-row)
                                              (adjoin-position new-row k rest-of-queens)
                                      )
                                      (enumerate-interval 1 board-size)
                                 )
                             )
                             (queens-cols (- k 1))
                    )
            )
        )
    )
    (queens-cols board-size)
)

(define empty-board (list '()))

(define (adjoin-position new-row k rest-of-queens)
    (append rest-of-queens (list new-row))
)

(define (safe? k positions)
    (define (last lst)
        (car (reverse lst))
    )
    (define (for-lst lst)
        (reverse (cdr (reverse lst)))
    )
    (define (iter n pos ret)
        (if (null? pos)
            ret
            (iter (- n 1)
                  (cdr pos)
                  (and (not (= (last positions) (car pos)))
                       (not (= (last positions) (+ (car pos) n)))
                       (not (= (last positions) (- (car pos) n)))
                       ret)
        )         )
    )
    (iter (- k 1) (for-lst positions) #t)
)

(queens 1)
(queens 2)
(queens 3)
(queens 4)

