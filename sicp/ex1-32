
(define (accumulate combiner null-value term a next b)
    (if (> a b)
        null-value
        (combiner (term a)
                  (accumulate combiner null-value term (next a) next b)
        )
    )
)

(define (sum term a next b)
    (accumulate + 0 term a next b)
)

(define (product term a next b)
    (accumulate * 1 term a next b)
)

(sum (lambda (x) x) 0 (lambda (x) (+ x 1)) 10)

(product (lambda (x) x) 1 (lambda (x) (+ x 1)) 5)

; b) iter ver
(define (accumulate combiner null-value term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (combiner a result))
        )
    )
    (iter a null-value)
)

(sum (lambda (x) x) 0 (lambda (x) (+ x 1)) 10)

(product (lambda (x) x) 1 (lambda (x) (+ x 1)) 10)

