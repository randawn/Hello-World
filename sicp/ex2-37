
(load "ex2-36")

(define (dot-product v w)
    (accumulate + 0 (map * v w))
)

(define (matrix-*-vector m v)
    (map (lambda (row) (dot-product row v))
         m
    )
)

(define (transpose mat)
    (accumulate-n cons
                  '()
                  mat
    )
)

(define (matrix-*-matrix m n)
    (let ((cols (transpose n)))
        (map (lambda (row) (matrix-*-vector cols row))
             m
        )
    )
)

(define v0 (list 1 2 3))
(define v1 (list 4 5 6))
(define m (list (list 1 2 3 4)
                (list 5 6 7 8)
                (list 9 10 11 12))
)

(dot-product v0 v1)
(transpose m)
(matrix-*-vector m (list 1 2 3 4))
(matrix-*-matrix m m)

