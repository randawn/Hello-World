
(define (fold-right op init seq)
    (if (null? seq)
        init
        (op (car seq)
            (fold-right op init (cdr seq))
        )
    )
)

(define (fold-left op init seq)
    (define (iter ret rest)
        (if (null? rest)
            ret
            (iter (op ret (car rest)) 
                  (cdr rest)
            )
        )
    )
    (iter init seq)
)

(fold-right / 1 (list 1 2 3))
(fold-left / 1 (list 1 2 3))
(fold-right list '() (list 1 2 3))
(fold-left list '() (list 1 2 3))

(define (reverse seq)
    (fold-right (lambda (x y) (append y (list x))) '() seq)
)
(reverse (list 1 2 3))

(define (reverse seq)
    (fold-left (lambda (x y) (cons y x)) '() seq)
)
(reverse (list 1 2 3))

