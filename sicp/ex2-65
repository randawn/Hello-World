
(load "ex2-62")
(load "ex2-63")
(define (list->tree elements)
    (car (partial-tree elements (length elements)))
)

(define (partial-tree elts n)
    (if (= n 0)
        (cons '() elts)
        (let ((left-size (quotient (- n 1) 2)))
            (let ((left-result (partial-tree elts left-size)))
                (let ((left-tree (car left-result))
                      (non-left-elts (cdr left-result))
                      (right-size (- n (+ left-size 1)))
                     )
                     (let ((this-entry (car non-left-elts))
                           (right-result (partial-tree (cdr non-left-elts) right-size))
                          )
                          (let ((right-tree (car right-result))
                                (remaining-elt (cdr right-result))
                               )
                               (cons (make-tree this-entry left-tree right-tree)
                                     remaining-elt))))))
    )
)

(define (union-tree set1 set2)
    (list->tree (union-set (tree->list2 set1)
                           (tree->list2 set2)
                )
    )
)
(define (intersection-tree set1 set2)
    (list->tree (intersection-set (tree->list2 set1)
                                  (tree->list2 set2)
                )
    )
)

(define ll (make-tree 1 '() '()))
(define lr (make-tree 8 '() '()))
(define t1 (make-tree 2 ll lr))
(define ll (make-tree 4 '() '()))
(define lr (make-tree 8 '() '()))
(define t2 (make-tree 5 ll lr))
(union-tree t1 t2)
(intersection-tree t1 t2)


