(load "ex2-56")
(define addend       car)
(define augend       cadr)
(define multiplier   car)
(define multiplicand cadr)
(define base         car)
(define exponent     cadr)

(define (deriv-product exp var)
    (make-sum (make-product (multiplier exp)
                            (deriv (multiplicand exp) var)
              )
              (make-product (multiplicand exp)
                            (deriv (multiplier exp) var)))
)
(define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var))
)
(define (deriv-exp exp var)
    (make-product (make-product (exponent exp)
                                (make-exponentiation (base exp)
                                                     (- (exponent exp) 1)
                                )
                  )
                  (deriv (base exp)
                         var
                  )
    )
)

;use global two-dimensional association table.
(define put 2d-put!)
(define get 2d-get)

(put 'deriv '* deriv-product)
(put 'deriv '+ deriv-sum)
(put 'deriv '** deriv-exp)

(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (deriv exp var)
    (cond ((number? exp) 0)
          ((symbol? exp) (if (same-variable? exp var) 1 0))
          ;(else ((get (operator exp) 'deriv) (operands exp)
          (else ((get 'deriv (operator exp)) (operands exp)
                                             var))
    )
)

(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(** x 0) 'x)
(deriv '(** x 1) 'x)
(deriv '(** x 2) 'x)
(deriv '(** x 3) 'x)

