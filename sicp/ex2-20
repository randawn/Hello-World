
(define (same-parity x . args)
    (define (iter-chk p lst ret)
        (if (null? lst)
            ret
            (iter-chk p
                      (cdr lst)
                      (if (= (remainder (car lst) 2) p)
                          (append ret (list (car lst)))
                          ret
                      )
            )
        )
    )
    (iter-chk (remainder x 2) (cons x args) '())
)

(same-parity 1 2 3 4 5 6 7)

(same-parity 2 3 4 5 6 7 8)

