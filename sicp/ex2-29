
(define (make-mobile left right)
    (list left right)
)

(define (make-branch length structure)
    (list length structure)
)

(define (left-branch mobile)
    (car mobile)
)
(define (right-branch mobile)
    (cadr mobile)
)

(define (branch-length branch)
    (car branch)
)
(define (branch-structure branch)
    (cadr branch)
)



(define (total-weight mobile)
    (define b-s-l-b (branch-structure (left-branch mobile)))
    (define b-s-r-b (branch-structure (right-branch mobile)))
    (cond ((and (pair? b-s-l-b)
                (pair? b-s-r-b)) 
           (+ (total-weight b-s-l-b)
              (total-weight b-s-r-b))
          )
          ((pair? b-s-l-b)
           (+ (total-weight b-s-l-r) 
               b-s-r-b)
          )
          ((pair? b-s-r-b)
           (+ b-s-l-b
              (total-weight b-s-r-b) )
          )
          (else (+ b-s-l-b b-s-r-b))
    )
)
(define (total-weight m)
    (define b-s-l-b (lambda (m) (branch-structure (left-branch m))))
    (define b-s-r-b (lambda (m) (branch-structure (right-branch m))))
    (cond ((not (pair? m)) m)
          (else (+ (total-weight (b-s-l-b m))
                   (total-weight (b-s-r-b m)))
          )
    )
)

(define m (make-mobile (make-branch 10 20) (make-branch 10 25)))
(define n (make-mobile (make-branch 10 20) (make-branch 10 m)))
(define q (make-mobile (make-branch 10 n) (make-branch 10 m)))

(total-weight m)
(total-weight n)
(total-weight q)


(define (blance-check mobile)
    (define b-s-l-b (branch-structure (left-branch mobile)))
    (define b-s-r-b (branch-structure (right-branch mobile)))
    (define b-l-l-b (branch-length (left-branch mobile)))
    (define b-l-r-b (branch-length (right-branch mobile)))
    (cond ((and (pair? b-s-l-b)
                (pair? b-s-r-b)) 
           (and (blance-check b-s-l-b)
                (blance-check b-s-r-b))
          )
          ((pair? b-s-l-b)
           (and (blance-check b-s-l-b) 
                (= (* b-l-l-b (branch-weight b-s-l-b))
                   (* b-l-r-b b-s-r-b)))
          )
          ((pair? b-s-r-b)
           (and (blance-check b-s-r-b) 
                (= (* b-l-l-b b-s-l-b)
                   (* b-l-r-b (branch-weight b-s-r-b))))
          )
          (else (= (* b-l-l-b b-s-l-b)
                   (* b-l-r-b b-s-r-b))
          )
    )
)

(define m (make-mobile (make-branch 10 20) (make-branch 10 20)))
(define n (make-mobile (make-branch 10 20) (make-branch 10 10)))
(define q (make-mobile (make-branch 10 m) (make-branch 10 n)))
(blance-check m)
(blance-check n)
(blance-check q)

